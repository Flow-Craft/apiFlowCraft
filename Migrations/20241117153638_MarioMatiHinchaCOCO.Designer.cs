// <auto-generated />
using System;
using ApiNet8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiNet8.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241117153638_MarioMatiHinchaCOCO")]
    partial class MarioMatiHinchaCOCO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiNet8.Models.Club.ClubHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParametrosClubId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParametrosClubId");

                    b.ToTable("ClubHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Club.ParametrosClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorBannerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorPrincipal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorSecundario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionQuienesSomos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("IconoPlataforma")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LogoGrande")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LogoPequenio")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerfilClubId")
                        .HasColumnType("int");

                    b.Property<string>("TextoBannerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextoEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextoFooterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TituloQuienesSomos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PerfilClubId");

                    b.ToTable("ParametrosClub");
                });

            modelBuilder.Entity("ApiNet8.Models.Club.PerfilClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePerfilClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PerfilClub");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraEntrada")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.EstadoEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EstadoEvento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "Evento creado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(401),
                            NombreEstado = "Creado",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Evento cancelado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(404),
                            NombreEstado = "Cancelado",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Evento finalizado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(405),
                            NombreEstado = "Finalizado",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Evento iniciado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(407),
                            NombreEstado = "Iniciado",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 5,
                            DescripcionEstado = "Evento suspendido",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(408),
                            NombreEstado = "Suspendido",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 6,
                            DescripcionEstado = "Evento en entretiempo",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(409),
                            NombreEstado = "Entretiempo",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Banner")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("CupoMaximo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("EventoLleno")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFinEvento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstalacionId")
                        .HasColumnType("int");

                    b.Property<string>("LinkStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoEventoId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("InstalacionId");

                    b.HasIndex("TipoEventoId");

                    b.ToTable("Evento");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Evento");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.HistorialEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoEventoId")
                        .HasColumnType("int");

                    b.Property<int?>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoEventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("HistorialEvento");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Inscripcion");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.TipoEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreTipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TipoEvento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Partido de un deporte",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(446),
                            NombreTipoEvento = "Partido",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Recital en el club",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(448),
                            NombreTipoEvento = "Recital",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Taller de enseñanza",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(450),
                            NombreTipoEvento = "Taller",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Curso",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(452),
                            NombreTipoEvento = "Curso",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Feria",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(453),
                            NombreTipoEvento = "Feria",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.AsistenciaLeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AsistioAlumno")
                        .HasColumnType("bit");

                    b.Property<bool>("ClaseCompleta")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeccionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeccionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AsistenciaLeccion");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EdadMaxima")
                        .HasColumnType("int");

                    b.Property<int>("EdadMinima")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantJugadores")
                        .HasColumnType("int");

                    b.Property<int>("CantJugadoresEnBanca")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodosMax")
                        .HasColumnType("int");

                    b.Property<int>("TarjetasAdvertencia")
                        .HasColumnType("int");

                    b.Property<int>("TarjetasExpulsion")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Disciplina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantJugadores = 11,
                            CantJugadoresEnBanca = 11,
                            Descripcion = "Juego entre dos equipos de once jugadores cada uno, cuyo objetivo es hacer entrar en la portería contraria un balón que no puede ser tocado con las manos ni con los brazos, salvo por el portero en su área de meta.",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(127),
                            Nombre = "Futbol",
                            PeriodosMax = 2,
                            TarjetasAdvertencia = 2,
                            TarjetasExpulsion = 1,
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            CantJugadores = 7,
                            CantJugadoresEnBanca = 7,
                            Descripcion = "Es un deporte donde dos equipos se enfrentan sobre un terreno de juego liso separados por una red central, tratando de pasar el balón por encima de la red hacia el suelo del campo contrario.",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(141),
                            Nombre = "Voleyball",
                            PeriodosMax = 5,
                            TarjetasAdvertencia = 2,
                            TarjetasExpulsion = 1,
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.InscripcionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeccionId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeccionId");

                    b.ToTable("InscripcionUsuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.Leccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantMaxima")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<string>("Horarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idProfesor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("Leccion");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.LeccionEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LeccionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.LeccionHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeccionEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("LeccionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeccionEstadoId");

                    b.HasIndex("LeccionId");

                    b.ToTable("LeccionHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.NoticiasYNotificaciones.Noticias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.Property<string>("tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Noticias");
                });

            modelBuilder.Entity("ApiNet8.Models.NoticiasYNotificaciones.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Adjunto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notificacion");
                });

            modelBuilder.Entity("ApiNet8.Models.NoticiasYNotificaciones.UsuarioNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioNotificacion");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.AccionPartido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EquipoLocal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minuto")
                        .HasColumnType("int");

                    b.Property<int>("NroJugador")
                        .HasColumnType("int");

                    b.Property<int>("NroJugadorCambio")
                        .HasColumnType("int");

                    b.Property<int>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int?>("Periodo")
                        .HasColumnType("int");

                    b.Property<int>("TipoAccionPartidoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoId");

                    b.HasIndex("TipoAccionPartidoId");

                    b.ToTable("AccionPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Local")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EquipoEstado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "Equipo activo",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(481),
                            NombreEstado = "Activo",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Equipo inactivo",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(484),
                            NombreEstado = "Inactivo",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Equipo suspendido",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(485),
                            NombreEstado = "Suspendido",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipoEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoEstadoId");

                    b.HasIndex("EquipoId");

                    b.ToTable("EquipoHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoPartido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("JugadoresEnBanca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JugadoresEnCancha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.ToTable("EquipoPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumCamiseta")
                        .HasColumnType("int");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EquipoUsuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Estadistica", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarcaEstadistica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuntajeTipoAccion")
                        .HasColumnType("int");

                    b.Property<string>("RazonBaja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Estadistica");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Estadisticas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AsistenciaLeccionId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarcaEstadistica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NroJugador")
                        .HasColumnType("int");

                    b.Property<int?>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int>("PuntajeTipoAccion")
                        .HasColumnType("int");

                    b.Property<string>("RazonBaja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoAccionPartidoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.HasIndex("PartidoId");

                    b.HasIndex("TipoAccionPartidoId");

                    b.ToTable("Estadisticas");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TipoAccionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoAccionEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoAccionPartidoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAccionEstadoId");

                    b.HasIndex("TipoAccionPartidoId");

                    b.ToTable("TipoAccionHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionPartido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsPartido")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ModificaTarjetasAdvertencia")
                        .HasColumnType("bit");

                    b.Property<bool>("ModificaTarjetasExpulsion")
                        .HasColumnType("bit");

                    b.Property<string>("NombreTipoAccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.Property<bool>("secuencial")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("TipoAccionPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.Instalacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condiciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("HoraCierre")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instalacion");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.InstalacionEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InstalacionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.InstalacionHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstalacionEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("InstalacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstalacionEstadoId");

                    b.HasIndex("InstalacionId");

                    b.ToTable("InstalacionHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstalacionId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstalacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("ApiNet8.Models.TYC.HistorialTerminosYCondiciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinVigencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioVigencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistorialTerminosYCondiciones");
                });

            modelBuilder.Entity("ApiNet8.Models.TYC.TerminosYCondiciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistorialTerminosYCondicionesId")
                        .HasColumnType("int");

                    b.Property<string>("TYC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HistorialTerminosYCondicionesId");

                    b.ToTable("TerminosYCondiciones");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.PartidoFase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FasePartido")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartidoFaseId")
                        .HasColumnType("int");

                    b.Property<int>("TorneoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoFaseId");

                    b.HasIndex("TorneoId");

                    b.ToTable("PartidoFase");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.Torneo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Banner")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CantEquipos")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Condiciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("Torneo");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.TorneoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TorneoEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.TorneoHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("TorneoEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("TorneoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TorneoEstadoId");

                    b.HasIndex("TorneoId");

                    b.ToTable("TorneoHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.CodigoVerificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CodigoVerificacion");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.EstadoSolicitudAsociacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EstadoSolicitudAsociacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "Solicitud pendiente",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(510),
                            NombreEstado = "Pendiente",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Solicitud aprobada",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(512),
                            NombreEstado = "Aprobada",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Solicitud rechazada",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(515),
                            NombreEstado = "Rechazada",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.GrupoFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentosGrupoFamiliar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuenioGrupoFamiliarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreGrupoFamiliar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duenioGrupoFamiliar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DuenioGrupoFamiliarId");

                    b.ToTable("GrupoFamiliar");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Perfil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionPerfil = "Administrador general del sistema",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(539),
                            NombrePerfil = "Admin",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            DescripcionPerfil = "Administrativo perteneciente al club",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(541),
                            NombrePerfil = "Administrativo",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            DescripcionPerfil = "Usuario publico",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(543),
                            NombrePerfil = "Simpatizante",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 4,
                            DescripcionPerfil = "Usuario privado socio del club",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(544),
                            NombrePerfil = "Socio",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 5,
                            DescripcionPerfil = "Usuario privado profesor perteneciente al club",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(546),
                            NombrePerfil = "Profesor",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 6,
                            DescripcionPerfil = "Usuario privado arbitro oficial para partidos",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(547),
                            NombrePerfil = "Arbitro",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 7,
                            DescripcionPerfil = "Usuario privado ayudante de profesor en partidos",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(549),
                            NombrePerfil = "Planillero",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.PerfilPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("PermisoId");

                    b.ToTable("PerfilPermiso");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.PerfilUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PerfilUsuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Funcionalidades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permiso");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(576),
                            Funcionalidades = "ABM usuario",
                            Modulo = "Usuario",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(581),
                            Funcionalidades = "ABM solicitud",
                            Modulo = "Solicitudes",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(583),
                            Funcionalidades = "ABM perfil",
                            Modulo = "Perfiles",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 4,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(585),
                            Funcionalidades = "ABM configuración del sistema",
                            Modulo = "Configuraciones generales",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 5,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(586),
                            Funcionalidades = "ABM disciplina",
                            Modulo = "Disciplina",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 6,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(588),
                            Funcionalidades = "ABM categoria",
                            Modulo = "Categoria",
                            NombrePermiso = "Configuracion del sistema"
                        },
                        new
                        {
                            Id = 7,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(589),
                            Funcionalidades = "Ver disciplinas",
                            Modulo = "Disciplina",
                            NombrePermiso = "Disciplina"
                        },
                        new
                        {
                            Id = 8,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(593),
                            Funcionalidades = "Ver instalaciones",
                            Modulo = "Usuario",
                            NombrePermiso = "Instalaciones"
                        },
                        new
                        {
                            Id = 9,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(595),
                            Funcionalidades = "ABM instalación",
                            Modulo = "Usuario",
                            NombrePermiso = "Instalaciones"
                        },
                        new
                        {
                            Id = 10,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(596),
                            Funcionalidades = "Ver / Compartir noticias",
                            Modulo = "Noticias",
                            NombrePermiso = "Noticias"
                        },
                        new
                        {
                            Id = 11,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(597),
                            Funcionalidades = "ABM noticia",
                            Modulo = "Noticias",
                            NombrePermiso = "Noticias"
                        },
                        new
                        {
                            Id = 12,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(599),
                            Funcionalidades = "ABM notificación",
                            Modulo = "Notificaciones",
                            NombrePermiso = "Noticias"
                        },
                        new
                        {
                            Id = 13,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(600),
                            Funcionalidades = "Ver partidos",
                            Modulo = "Partidos",
                            NombrePermiso = "Partidos"
                        },
                        new
                        {
                            Id = 14,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(602),
                            Funcionalidades = "Gestionar partido",
                            Modulo = "Partidos",
                            NombrePermiso = "Partidos"
                        },
                        new
                        {
                            Id = 15,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(603),
                            Funcionalidades = "Gestionar estadisticas partido",
                            Modulo = "Partidos",
                            NombrePermiso = "Partidos"
                        },
                        new
                        {
                            Id = 16,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(605),
                            Funcionalidades = "Ver mi perfil",
                            Modulo = "Mi perfil",
                            NombrePermiso = "Mi perfil"
                        },
                        new
                        {
                            Id = 17,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(606),
                            Funcionalidades = "Generar QR",
                            Modulo = "Mi perfil",
                            NombrePermiso = "Mi perfil"
                        },
                        new
                        {
                            Id = 18,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(608),
                            Funcionalidades = "ABM reserva",
                            Modulo = "Reservas",
                            NombrePermiso = "Reservas"
                        },
                        new
                        {
                            Id = 19,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(610),
                            Funcionalidades = "Ver lección",
                            Modulo = "Lecciones",
                            NombrePermiso = "Lecciones"
                        },
                        new
                        {
                            Id = 20,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(611),
                            Funcionalidades = "Gestionar lección",
                            Modulo = "Lecciones",
                            NombrePermiso = "Lecciones"
                        },
                        new
                        {
                            Id = 21,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(613),
                            Funcionalidades = "Gestionar evento",
                            Modulo = "Eventos",
                            NombrePermiso = "Eventos"
                        },
                        new
                        {
                            Id = 22,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(614),
                            Funcionalidades = "Asistencia evento",
                            Modulo = "Eventos",
                            NombrePermiso = "Eventos"
                        },
                        new
                        {
                            Id = 23,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(615),
                            Funcionalidades = "Ver estadisticas de lección y partidos",
                            Modulo = "Estadisticas",
                            NombrePermiso = "Estadisticas"
                        },
                        new
                        {
                            Id = 24,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(617),
                            Funcionalidades = "ABM torneo",
                            Modulo = "Torneos",
                            NombrePermiso = "Torneos"
                        },
                        new
                        {
                            Id = 25,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(618),
                            Funcionalidades = "Inscripción torneo",
                            Modulo = "Torneos",
                            NombrePermiso = "Torneos"
                        },
                        new
                        {
                            Id = 26,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(619),
                            Funcionalidades = "Gestionar equipo",
                            Modulo = "Equipos",
                            NombrePermiso = "Torneos"
                        },
                        new
                        {
                            Id = 27,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(621),
                            Funcionalidades = "ABM estado equipo",
                            Modulo = "Equipo",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 28,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(622),
                            Funcionalidades = "ABM estado evento",
                            Modulo = "Evento",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 29,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(624),
                            Funcionalidades = "ABM estado usuario",
                            Modulo = "Usuario",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 30,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(626),
                            Funcionalidades = "ABM estado lección",
                            Modulo = "Lección",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 31,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(627),
                            Funcionalidades = "ABM estado instalación",
                            Modulo = "Instalación",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 32,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(629),
                            Funcionalidades = "ABM estado torneo",
                            Modulo = "Torneo",
                            NombrePermiso = "Estados"
                        },
                        new
                        {
                            Id = 33,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(630),
                            Funcionalidades = "ABM tipo evento",
                            Modulo = "Evento",
                            NombrePermiso = "Tipos"
                        },
                        new
                        {
                            Id = 34,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(632),
                            Funcionalidades = "ABM tipo accion",
                            Modulo = "Accion",
                            NombrePermiso = "Tipos"
                        },
                        new
                        {
                            Id = 35,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(633),
                            Funcionalidades = "Modificar backup",
                            Modulo = "Backup",
                            NombrePermiso = "Backup"
                        },
                        new
                        {
                            Id = 36,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(634),
                            Funcionalidades = "Visualizar Backup",
                            Modulo = "Backup",
                            NombrePermiso = "Backup"
                        },
                        new
                        {
                            Id = 37,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(636),
                            Funcionalidades = "Descargar PDF/Excel",
                            Modulo = "Reservas",
                            NombrePermiso = "Reportes"
                        },
                        new
                        {
                            Id = 38,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(674),
                            Funcionalidades = "Descargar PDF/Excel",
                            Modulo = "Asistencia lecciones",
                            NombrePermiso = "Reportes"
                        },
                        new
                        {
                            Id = 39,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(676),
                            Funcionalidades = "Descargar PDF/Excel",
                            Modulo = "Asistencias eventos",
                            NombrePermiso = "Reportes"
                        },
                        new
                        {
                            Id = 40,
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(677),
                            Funcionalidades = "Descargar PDF/Excel",
                            Modulo = "Estadisticas",
                            NombrePermiso = "Reportes"
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.SolicitudAsociacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MotivoRechazo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudAsociacion");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.SolicitudAsociacionHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoSolicitudAsociacionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SolicitudAsociacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoSolicitudAsociacionId");

                    b.HasIndex("SolicitudAsociacionId");

                    b.ToTable("SolicitudAsociacionHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodPostal")
                        .HasColumnType("int");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeporteFavorito")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAceptacionTYC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCambioContrasena")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("GrupoFamiliarId")
                        .HasColumnType("int");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartidoId")
                        .HasColumnType("int");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GrupoFamiliarId");

                    b.HasIndex("PartidoId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.UsuarioEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEditor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsuarioEstado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "Usuario activo en el club",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(310),
                            NombreEstado = "Activo",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Usuario bloqueado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(366),
                            NombreEstado = "Bloqueado",
                            UsuarioEditor = 1
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Usuario desactivado",
                            FechaCreacion = new DateTime(2024, 11, 17, 12, 36, 37, 81, DateTimeKind.Local).AddTicks(368),
                            NombreEstado = "Desactivado",
                            UsuarioEditor = 1
                        });
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.UsuarioHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetalleCambioEstado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioEditor")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEstadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioHistorial");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Partido", b =>
                {
                    b.HasBaseType("ApiNet8.Models.Eventos.Evento");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GanadorId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalId")
                        .HasColumnType("int");

                    b.Property<int?>("PartidoFaseId")
                        .HasColumnType("int");

                    b.Property<int?>("Periodo")
                        .HasColumnType("int");

                    b.Property<int?>("ResultadoLocal")
                        .HasColumnType("int");

                    b.Property<int?>("ResultadoVisitante")
                        .HasColumnType("int");

                    b.Property<string>("Set")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitanteId")
                        .HasColumnType("int");

                    b.HasIndex("GanadorId");

                    b.HasIndex("LocalId");

                    b.HasIndex("PartidoFaseId");

                    b.HasIndex("VisitanteId");

                    b.HasDiscriminator().HasValue("Partido");
                });

            modelBuilder.Entity("ApiNet8.Models.Club.ClubHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Club.ParametrosClub", null)
                        .WithMany("clubHistoriales")
                        .HasForeignKey("ParametrosClubId");
                });

            modelBuilder.Entity("ApiNet8.Models.Club.ParametrosClub", b =>
                {
                    b.HasOne("ApiNet8.Models.Club.PerfilClub", "PerfilClub")
                        .WithMany()
                        .HasForeignKey("PerfilClubId");

                    b.Navigation("PerfilClub");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Asistencia", b =>
                {
                    b.HasOne("ApiNet8.Models.Eventos.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Evento", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Reservas.Instalacion", "Instalacion")
                        .WithMany()
                        .HasForeignKey("InstalacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Eventos.TipoEvento", "TipoEvento")
                        .WithMany()
                        .HasForeignKey("TipoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Disciplina");

                    b.Navigation("Instalacion");

                    b.Navigation("TipoEvento");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.HistorialEvento", b =>
                {
                    b.HasOne("ApiNet8.Models.Eventos.EstadoEvento", "EstadoEvento")
                        .WithMany()
                        .HasForeignKey("EstadoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Eventos.Evento", null)
                        .WithMany("HistorialEventoList")
                        .HasForeignKey("EventoId");

                    b.Navigation("EstadoEvento");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Inscripcion", b =>
                {
                    b.HasOne("ApiNet8.Models.Eventos.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.AsistenciaLeccion", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Leccion", "Leccion")
                        .WithMany()
                        .HasForeignKey("LeccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.InscripcionUsuario", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Leccion", "Leccion")
                        .WithMany()
                        .HasForeignKey("LeccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.Leccion", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.LeccionHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.LeccionEstado", "LeccionEstado")
                        .WithMany()
                        .HasForeignKey("LeccionEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Leccion", null)
                        .WithMany("LeccionHistoriales")
                        .HasForeignKey("LeccionId");

                    b.Navigation("LeccionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.NoticiasYNotificaciones.UsuarioNotificacion", b =>
                {
                    b.HasOne("ApiNet8.Models.NoticiasYNotificaciones.Notificacion", "Notificacion")
                        .WithMany()
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.AccionPartido", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("PartidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.TipoAccionPartido", "TipoAccionPartido")
                        .WithMany()
                        .HasForeignKey("TipoAccionPartidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partido");

                    b.Navigation("TipoAccionPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Equipo", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.EquipoEstado", "EquipoEstado")
                        .WithMany()
                        .HasForeignKey("EquipoEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.Equipo", null)
                        .WithMany("EquipoHistoriales")
                        .HasForeignKey("EquipoId");

                    b.Navigation("EquipoEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoPartido", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.EquipoUsuario", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.Equipo", null)
                        .WithMany("EquipoUsuarios")
                        .HasForeignKey("EquipoId");

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Estadistica", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.AsistenciaLeccion", "AsistenciaLeccion")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.TipoAccionPartido", "TipoAccionPartido")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AsistenciaLeccion");

                    b.Navigation("Equipo");

                    b.Navigation("Partido");

                    b.Navigation("TipoAccionPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Estadisticas", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("EquipoId");

                    b.HasOne("ApiNet8.Models.Partidos.Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("PartidoId");

                    b.HasOne("ApiNet8.Models.Partidos.TipoAccionPartido", "TipoAccionPartido")
                        .WithMany()
                        .HasForeignKey("TipoAccionPartidoId");

                    b.Navigation("Equipo");

                    b.Navigation("Partido");

                    b.Navigation("TipoAccionPartido");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.TipoAccionEstado", "TipoAccionEstado")
                        .WithMany()
                        .HasForeignKey("TipoAccionEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Partidos.TipoAccionPartido", null)
                        .WithMany("TipoAccionHistoriales")
                        .HasForeignKey("TipoAccionPartidoId");

                    b.Navigation("TipoAccionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionPartido", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.InstalacionHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Reservas.InstalacionEstado", "InstalacionEstado")
                        .WithMany()
                        .HasForeignKey("InstalacionEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Reservas.Instalacion", null)
                        .WithMany("instalacionHistoriales")
                        .HasForeignKey("InstalacionId");

                    b.Navigation("InstalacionEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.Reserva", b =>
                {
                    b.HasOne("ApiNet8.Models.Reservas.Instalacion", "Instalacion")
                        .WithMany()
                        .HasForeignKey("InstalacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instalacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.TYC.TerminosYCondiciones", b =>
                {
                    b.HasOne("ApiNet8.Models.TYC.HistorialTerminosYCondiciones", "HistorialTerminosYCondiciones")
                        .WithMany()
                        .HasForeignKey("HistorialTerminosYCondicionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialTerminosYCondiciones");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.PartidoFase", b =>
                {
                    b.HasOne("ApiNet8.Models.Torneos.PartidoFase", null)
                        .WithMany("Llave")
                        .HasForeignKey("PartidoFaseId");

                    b.HasOne("ApiNet8.Models.Torneos.Torneo", "Torneo")
                        .WithMany()
                        .HasForeignKey("TorneoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Torneo");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.Torneo", b =>
                {
                    b.HasOne("ApiNet8.Models.Lecciones.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Lecciones.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.TorneoHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Torneos.TorneoEstado", "TorneoEstado")
                        .WithMany()
                        .HasForeignKey("TorneoEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Torneos.Torneo", null)
                        .WithMany("TorneoHistoriales")
                        .HasForeignKey("TorneoId");

                    b.Navigation("TorneoEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.CodigoVerificacion", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.GrupoFamiliar", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "DuenioGrupoFamiliar")
                        .WithMany()
                        .HasForeignKey("DuenioGrupoFamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DuenioGrupoFamiliar");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.PerfilPermiso", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Permiso", "Permiso")
                        .WithMany()
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Permiso");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.PerfilUsuario", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.SolicitudAsociacion", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.SolicitudAsociacionHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.EstadoSolicitudAsociacion", "EstadoSolicitudAsociacion")
                        .WithMany()
                        .HasForeignKey("EstadoSolicitudAsociacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.SolicitudAsociacion", null)
                        .WithMany("SolicitudAsociacionHistoriales")
                        .HasForeignKey("SolicitudAsociacionId");

                    b.Navigation("EstadoSolicitudAsociacion");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.Usuario", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.GrupoFamiliar", null)
                        .WithMany("Integrantes")
                        .HasForeignKey("GrupoFamiliarId");

                    b.HasOne("ApiNet8.Models.Partidos.Partido", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("PartidoId");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.UsuarioHistorial", b =>
                {
                    b.HasOne("ApiNet8.Models.Usuarios.UsuarioEstado", "UsuarioEstado")
                        .WithMany()
                        .HasForeignKey("UsuarioEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiNet8.Models.Usuarios.Usuario", null)
                        .WithMany("UsuarioHistoriales")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("UsuarioEstado");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Partido", b =>
                {
                    b.HasOne("ApiNet8.Models.Partidos.EquipoPartido", "Ganador")
                        .WithMany()
                        .HasForeignKey("GanadorId");

                    b.HasOne("ApiNet8.Models.Partidos.EquipoPartido", "Local")
                        .WithMany()
                        .HasForeignKey("LocalId");

                    b.HasOne("ApiNet8.Models.Torneos.PartidoFase", null)
                        .WithMany("Partidos")
                        .HasForeignKey("PartidoFaseId");

                    b.HasOne("ApiNet8.Models.Partidos.EquipoPartido", "Visitante")
                        .WithMany()
                        .HasForeignKey("VisitanteId");

                    b.Navigation("Ganador");

                    b.Navigation("Local");

                    b.Navigation("Visitante");
                });

            modelBuilder.Entity("ApiNet8.Models.Club.ParametrosClub", b =>
                {
                    b.Navigation("clubHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Eventos.Evento", b =>
                {
                    b.Navigation("HistorialEventoList");
                });

            modelBuilder.Entity("ApiNet8.Models.Lecciones.Leccion", b =>
                {
                    b.Navigation("LeccionHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Equipo", b =>
                {
                    b.Navigation("EquipoHistoriales");

                    b.Navigation("EquipoUsuarios");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.TipoAccionPartido", b =>
                {
                    b.Navigation("TipoAccionHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Reservas.Instalacion", b =>
                {
                    b.Navigation("instalacionHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.PartidoFase", b =>
                {
                    b.Navigation("Llave");

                    b.Navigation("Partidos");
                });

            modelBuilder.Entity("ApiNet8.Models.Torneos.Torneo", b =>
                {
                    b.Navigation("TorneoHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.GrupoFamiliar", b =>
                {
                    b.Navigation("Integrantes");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.SolicitudAsociacion", b =>
                {
                    b.Navigation("SolicitudAsociacionHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Usuarios.Usuario", b =>
                {
                    b.Navigation("UsuarioHistoriales");
                });

            modelBuilder.Entity("ApiNet8.Models.Partidos.Partido", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
